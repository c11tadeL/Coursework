<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>